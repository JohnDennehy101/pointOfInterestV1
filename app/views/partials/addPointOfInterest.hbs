<div class="uk-margin uk-width-2xlarge uk-margin-auto uk-card uk-card-default uk-card-body uk-box-shadow-large">
    <form class="uk-form-stacked uk-text-left" enctype="multipart/form-data" action="/addMonument" method="POST">
        <div class="uk-grid uk-grid-stack">
            <div class="uk-width-1@m">
                <div class="uk-margin">
                    <label class="uk-form-label" for="form-stacked-text">Monument Title</label>
                    <div class="uk-form-controls">
                        <input class="uk-input" id="form-stacked-text" type="text" name="title"
                            placeholder="Enter Monument Title" />
                    </div>
                </div>
                <div class="uk-margin">
                    <div class="uk-form-label">Description</div>
                    <div class="uk-form-controls">

                        <textarea class="uk-textarea" id="form-stacked-text" type="text" name="description"
                            placeholder="Enter Monument Description"></textarea>
                    </div>
                </div>
            </div>
            <!--<div class="uk-width-1@m uk-margin">
                <div class="uk-margin">
                    <label class="uk-form-label" for="form-stacked-text">Monument Title</label>
                    <div class="uk-form-controls">
                        <input class="uk-input" id="form-stacked-text" type="file"
                            accept="image/x-png,image/gif,image/jpeg" name="title" placeholder="Enter Monument Title" />
                    </div>
                </div>
            </div>-->


            <div class="uk-margin">
                <div class="uk-form-label">Image</div>
                <div uk-form-custom>
                    <input type="file" accept="image/x-png,image/gif,image/jpeg" name="imageUpload">
                    <button class="uk-button uk-button-default" type="button" tabindex="-1" name='test'>Add Monument
                        Image</button>
                </div>
            </div>







            <p class="uk-text-lead">Single file upload preview</p>

            <div class="uk-upload-box">
                <div id="error-alert-file-upload" class="uk-alert-danger uk-margin-top uk-hidden" uk-alert>
                    <p id="error-messages-fileupload"></p>
                </div>

                <div class="js-upload uk-placeholder uk-text-center">
                    <span uk-icon="icon: cloud-upload"></span>
                    <span class="uk-text-middle uk-margin-small-left">Attach files by dropping them here or</span>
                    <div uk-form-custom>
                        <input name="image" accept="image/png, image/jpeg" type="file">
                        <span class="uk-link">selecting one</span>
                    </div>

                    <ul id="preview"
                        class="uk-list uk-grid-match uk-child-width-1-2 uk-child-width-1-4@l uk-child-width-1-5@xl uk-text-center"
                        uk-grid uk-scrollspy="cls: uk-animation-scale-up; target: .list-item; delay: 80"></ul>
                </div>
            </div>

            <progress id="js-progressbar" class="uk-progress" value="0" max="100"> </progress>
            <div class="uk-clearfix">
                <div class="uk-float-left"><span class="bar-value-loaded"></span></div>
                <div class="uk-float-right"><span class="bar-value-total"></span></div>
            </div>
        </div>

        <script>
            function imgPreviewLi(readerResult, filename) {
                const li = document.createElement("li");
                const div = document.createElement("div");
                const img = document.createElement("img");
                const span = document.createElement("span");

                li.className = "list-item uk-margin-medium-top";
                li.setAttribute("name", "testImageLink")
                div.className = "uk-cover-container";
                img.className = "delete-img-preview";
                img.setAttribute("id", "img-preview-responsive");
                img.setAttribute("src", readerResult);
                img.setAttribute("name", "image")
                img.setAttribute("data-name", filename);
                img.setAttribute("alt", "file-image-preview");
                span.className = "uk-text-meta uk-text-break file-upload-name";
                span.textContent = filename;

                div.append(img);
                li.append(div, span);
                return li;
            }

            function previewMultipleFiles(files, fileInput, preview, alert, alertMessage) {
                const acceptedDocMimes = ["application/pdf", "image/png", "image/jpeg"];
                const docFiles = [...files]

                docFiles.forEach(file => {
                    const size = file["size"];
                    const fileType = file["type"];

                    if (docFiles.length !== 0) {
                        while (preview.firstChild) {
                            preview.removeChild(preview.firstChild);
                        }
                    }

                    if (size > 2000000) {
                        alertMessage.textContent =
                            "Sorry, one or more of your files has exceeded the file size limit of 2MB.";
                        alertMessage.classList.add("uk-text-danger");
                        alert.classList.remove("uk-hidden");
                        preview.innerHTML = "";
                        fileInput.files = [];
                        return false;
                    }

                    if (acceptedDocMimes.includes(fileType)) {
                        alertMessage.textContent = "";
                        alert.classList.add("uk-hidden");
                        fileInput.files = files;

                        // console.log(fileInput.files)

                        const reader = new FileReader();
                        reader.onload = () => {
                            let filename = file["name"];
                            let imgPreview = imgPreviewLi(reader.result, filename);
                            preview.append(imgPreview);
                        };
                        reader.readAsDataURL(file);
                    } else {
                        alertMessage.textContent = "Sorry, your file type is not allowed.";
                        alertMessage.classList.add("uk-text-danger");
                        alert.classList.remove("uk-hidden");
                        preview.innerHTML = "";
                        fileInput.files = [];
                    }
                });
            }

            function previewSingleFile(files, fileInput, preview, alert, alertMessage) {
                const acceptedDocMimes = ["application/pdf", "image/png", "image/jpeg"];
                const size = files[0]["size"];
                const fileType = files[0]["type"];
                let filename = files[0]["name"];

                if (files[0].length !== 0) {
                    while (preview.firstChild) {
                        preview.removeChild(preview.firstChild);
                    }
                }

                if (size > 2000000) {
                    alertMessage.textContent =
                        "Sorry, your file has exceeded the file size limit of 2MB.";
                    alertMessage.classList.add("uk-text-danger");
                    alert.classList.remove("uk-hidden");
                    preview.innerHTML = "";
                    fileInput.files = [];
                    console.log(`${size} is more than 2 mb`);
                    return false;
                }

                if (acceptedDocMimes.includes(fileType)) {
                    alertMessage.textContent = "";
                    alert.classList.add("uk-hidden");

                    const reader = new FileReader();
                    reader.onload = () => {
                        let imgPreview = imgPreviewLi(reader.result, filename);
                        preview.append(imgPreview);
                    };
                    reader.readAsDataURL(files[0]);

                } else {
                    alertMessage.textContent = "Sorry, your file type is not allowed.";
                    alertMessage.classList.add("uk-text-danger");
                    alert.classList.remove("uk-hidden");
                    preview.innerHTML = "";
                    fileInput.files = [];
                    console.log(`${fileType} is not allowed`);
                }
            }

            let bar = document.getElementById("js-progressbar");

            UIkit.upload(".js-upload", {
                url: "",
                multiple: true,

                beforeSend: function () {
                    // console.log('beforeSend', arguments);
                },

                beforeAll: function () {
                    const files = arguments[1];
                    const jsUploadEl = arguments[0].$el;
                    const fileInput = jsUploadEl.querySelector(".uk-form-custom>input");
                    const preview = jsUploadEl.querySelector("#preview");
                    const alert = jsUploadEl.parentElement.querySelector(
                        ".uk-upload-box>#error-alert-file-upload"
                    );
                    const alertMessage = jsUploadEl.parentElement.querySelector(
                        ".uk-upload-box>#error-alert-file-upload>p"
                    );
                    let multiple = false;

                    if (fileInput.hasAttribute("multiple")) {
                        multiple = true;
                        previewMultipleFiles(files, fileInput, preview, alert, alertMessage);
                    } else {
                        previewSingleFile(files, fileInput, preview, alert, alertMessage);
                    }
                },

                load: function () {
                    // console.log('load', arguments);
                },

                error: function () {
                    // console.log('error', arguments);
                },

                complete: function () {
                    // console.log('complete', arguments);
                },

                loadStart: function (e) {
                    // console.log('loadStart', arguments);

                    bar.removeAttribute("hidden");
                    bar.max = e.total;
                    bar.value = e.loaded;
                },

                progress: function (e) {
                    // console.log('progress', arguments);

                    bar.max = e.total;
                    bar.value = e.loaded;
                },

                loadEnd: function (e) {
                    // console.log('loadEnd', arguments);
                    bar.max = e.total;
                    bar.value = e.loaded;
                },

                completeAll: function () {
                    // console.log('completeAll', arguments);

                    setTimeout(function () {
                        bar.setAttribute("hidden", "hidden");
                    }, 1000);

                    // alert('Upload Completed');
                }
            });
        </script>


        <!--<div class="uk-width-1@m uk-margin">
                <div class="uk-margin js-upload uk-placeholder uk-text-center">
                    <span uk-icon="icon: cloud-upload"></span>
                    <span class="uk-text-middle">Add an image by dropping it here or</span>
                    <div uk-form-custom>
                        <input type="file" accept="image/x-png,image/gif,image/jpeg">
                        <span class="uk-link">selecting one</span>
                    </div>
                </div>
            </div>

            <progress id="js-progressbar" class="uk-progress" value="0" max="100" hidden></progress>

            <script>

                var bar = document.getElementById('js-progressbar');

                UIkit.upload('.js-upload', {

                    url: '/home',
                    multiple: false,


                    beforeSend: function () {
                        console.log('beforeSend', arguments);
                    },
                    beforeAll: function () {
                        console.log('beforeAll', arguments);
                    },
                    load: function () {
                        console.log('load', arguments);
                    },
                    error: function () {
                        console.log('error', arguments);
                    },
                    complete: function () {
                        console.log('complete', arguments);
                    },

                    loadStart: function (e) {
                        console.log('loadStart', arguments);

                        bar.removeAttribute('hidden');
                        bar.max = e.total;
                        bar.value = e.loaded;
                    },

                    progress: function (e) {
                        console.log('progress', arguments);

                        bar.max = e.total;
                        bar.value = e.loaded;
                    },

                    loadEnd: function (e) {
                        console.log('loadEnd', arguments);

                        bar.max = e.total;
                        bar.value = e.loaded;
                    },

                    completeAll: function () {
                        console.log('completeAll', arguments);

                        setTimeout(function () {
                            bar.setAttribute('hidden', 'hidden');
                        }, 1000);


                        UIkit.notification("All uploads have been finished");
                    }

                });

            </script> -->



        <div class="uk-width-1@m">
            <div class="uk-margin">
                <button class="submit uk-button uk-margin-top uk-button-primary uk-button-large uk-width-1-1">Add
                    Monument</button>
            </div>
        </div>
</div>
</form>
</div>