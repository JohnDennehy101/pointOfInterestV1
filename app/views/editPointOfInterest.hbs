<div class="uk-flex uk-flex-center uk-flex-middle uk-grid-small" uk-grid>
    {{> title-card title="Monument" subTitle="Edit Monument"}}
    {{> main-menu }}
</div>







<div class="uk-container uk-margin">
    <div class="uk-child-width-expand uk-flex-center uk-flex-middle uk-text-center" uk-grid>

        <div class="uk-width-2-3">
            <div class="uk-card uk-card-default uk-width-expand@m uk-card-body uk-box-shadow-large">
                <h3 class="uk-card-title uk-text-center">Edit Monument </h3>

                {{> editPointOfInterestForm}}
            </div>
            <div class="uk-width-1-3">
                {{!-- <ul id="preview"
                    class="uk-list uk-grid-match uk-child-width-1 uk-child-width-1 uk-child-width-1 uk-text-center"
                    uk-grid uk-scrollspy="cls: uk-animation-scale-up; target: .list-item; delay: 80">
                    <img width="450" src="{{monument.image}}" alt="" id="imageEditScreen">

                </ul> --}}
                {{> editPointOfInterestImage}}

            </div>
        </div>
    </div>
</div>





<script>
    let newCategoryInputField = document.getElementById('newCategoryInputField');
    let addNewCategoryButton = document.getElementById('addNewCategoryButton');
    let categoryDivContainer = document.getElementById('categoryDivContainer')

    addNewCategoryButton.addEventListener('click', () => {

        console.log(newCategoryInputField.value.length)
        if (newCategoryInputField.value.length > 1) {
            let checkboxParentDiv = document.createElement('div')
            checkboxParentDiv.classList.add('uk-width-expand@m')
            let checkboxLabel = document.createElement('label')

            checkboxLabel.innerHTML = `<input class="uk-checkbox" name="category" value=${newCategoryInputField.value} type="checkbox"> ${newCategoryInputField.value}`
            checkboxParentDiv.appendChild(checkboxLabel)

            categoryDivContainer.appendChild(checkboxParentDiv)
        }



    })




    const countyContainer = document.getElementById('countyContainer');
    let provinceSelectField = document.getElementById('provinceSelectField');
    let existingCategoriesParent = document.getElementById('existingCategoriesParent');
    const munsterCounties = ['Cork', 'Clare', 'Kerry', 'Limerick', 'Tipperary', 'Waterford']
    const leinsterCounties = ['Dublin', 'Wicklow', 'Kildare', 'Meath', 'Westmeath', 'Offaly', 'Kilkenny', 'Laois', 'Wexford', 'Carlow', 'Louth']
    const connachtCounties = ['Galway', 'Mayo', 'Sligo', 'Roscommon', 'Sligo', 'Leitrim']
    const ulsterCounties = ['Antrim', 'Derry', 'Down', 'Donegal', 'Fermanagh', 'Cavan', 'Tyrone', 'Armagh', 'Monaghan']
    let countySelectField = document.getElementById('countySelectField');

    let selectedProvince = '{{monument.province}}'
    let selectedCounty = '{{monument.county}}'
    //let existingSelectedCategories = '{{monument.categories}}'
    let existingSelectedCategories = '{{selectedCategories}}'
    console.log(selectedProvince)

    function populateProvinceCounties(provinceValue) {

        if (provinceValue === 'Munster') {
            createCountyOptions(munsterCounties)
        }
        else if (provinceValue === 'Leinster') {
            createCountyOptions(leinsterCounties)
        }
        else if (provinceValue === 'Connacht') {
            createCountyOptions(connachtCounties)
        }
        else if (provinceValue === 'Ulster') {
            createCountyOptions(ulsterCounties)
        }

    }

    function selectCurrentProvince(provinceTitle) {

        let provinceOptions = provinceSelectField.children;
        for (province in provinceOptions) {
            if (provinceOptions[province].textContent === provinceTitle) {
                provinceOptions[province].selected = true
                break

            }


        }


    }

    function selectCurrentCounty(countyTitle) {
        let countyOptions = countySelectField.children


        for (county in countyOptions) {
            if (countyOptions[county].textContent === countyTitle) {
                countyOptions[county].selected = true
                break

            }


        }
    }

    function selectCurrentCategories(categoryList) {

        let existingCheckboxes = document.getElementsByClassName('existingCategory')

        for (individualCheckbox in existingCheckboxes) {
            if (categoryList.includes(existingCheckboxes[individualCheckbox].value)) {
                existingCheckboxes[individualCheckbox].checked = true
            }
        }


    }


    selectCurrentProvince(selectedProvince)

    populateProvinceCounties(selectedProvince)

    selectCurrentCounty(selectedCounty)


    selectCurrentCategories(existingSelectedCategories)


    //setTimeout(selectCurrentCategories('a'), 3000);
    setTimeout(function () { selectCurrentCounty(selectedCounty) }, 3000);

    provinceSelectField.addEventListener('change', (e) => {
        countyContainer.style.display = 'block'
        deletePreviousCountyOptions(countySelectField)
        createDefaultOption()

        if (e.target.value === 'Munster') {
            createCountyOptions(munsterCounties)
        }
        else if (e.target.value === 'Leinster') {
            createCountyOptions(leinsterCounties)
        }
        else if (e.target.value === 'Connacht') {
            createCountyOptions(connachtCounties)
        }
        else if (e.target.value === 'Ulster') {
            createCountyOptions(ulsterCounties)
        }

    })

    function deletePreviousCountyOptions(countySelectField) {
        while (countySelectField.childNodes.length) {
            countySelectField.removeChild(countySelectField.lastChild);
        }
    }

    function createDefaultOption() {
        let disabledOption = document.createElement('option');
        disabledOption.value = ''
        disabledOption.textContent = 'Select County'
        disabledOption.disabled = true
        disabledOption.defaultSelected = true
        countySelectField.appendChild(disabledOption)


    }

    function createCountyOptions(provinceCountyArray) {
        for (county in provinceCountyArray) {
            let countyOption = document.createElement('option')
            countyOption.textContent = provinceCountyArray[county]
            countySelectField.appendChild(countyOption)

        }
    }








    let imageInput = document.getElementById('imageInput');

    const preview = document.getElementById('preview');
    function imgPreviewLi(readerResult, filename) {

        const img = document.getElementById('imageEditScreen')
        const span = document.createElement("span");

        img.className = "delete-img-preview";
        img.setAttribute("src", readerResult);
        img.setAttribute("name", "image")
        img.style.width = '450px'
        img.setAttribute("data-name", filename);
        img.setAttribute("alt", "file-image-preview");
        span.className = "uk-text-meta uk-text-break file-upload-name";
        span.textContent = filename;
        return img
    }


    let imageInputTest = document.getElementById('imageInput');

    function readFile(input) {

        let file = input.files[0];


        let fileName = input.files[0].name;

        let reader = new FileReader();

        if (preview.childNodes.length < 1) {
            reader.onload = function () {
                let imageResult = imgPreviewLi(reader.result, fileName)
                preview.append(imageResult)
            };
            reader.readAsDataURL(file);

            reader.onerror = function () {
                console.log(reader.error);
            };


        }
        else {
            reader.onload = function () {
                let imageResult = imgPreviewLi(reader.result, fileName)
                preview.append(imageResult)
            };
            reader.readAsDataURL(file);

            reader.onerror = function () {
                console.log(reader.error);
            };

        }



    }

</script>